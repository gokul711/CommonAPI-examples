/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "E01HelloWorldDBusProxy.h"

namespace commonapi {
namespace examples {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createE01HelloWorldDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection) {
    return std::make_shared<E01HelloWorldDBusProxy>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection);
}

INITIALIZER(registerE01HelloWorldDBusProxy) {
    CommonAPI::DBus::DBusFactory::registerProxyFactoryMethod(E01HelloWorld::getInterfaceId(),
       &createE01HelloWorldDBusProxy);
}

E01HelloWorldDBusProxy::E01HelloWorldDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection):
        CommonAPI::DBus::DBusProxy(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyconnection)
    {
    }



void E01HelloWorldDBusProxy::sayHello(const std::string& name, const int32_t& size, CommonAPI::CallStatus& callStatus, std::string& message) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, int32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::string> >::callMethodWithReply(
        *this,
        "sayHello",
        "si",
        name, size,
        callStatus
        , message);
}
std::future<CommonAPI::CallStatus> E01HelloWorldDBusProxy::sayHelloAsync(const std::string& name, const int32_t& size, SayHelloAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, int32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::string> >::callMethodAsync(
        *this,
        "sayHello",
        "si",
        name, size, 
        std::move(callback));
}



void E01HelloWorldDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 1;
}

} // namespace examples
} // namespace commonapi
