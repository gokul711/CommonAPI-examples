/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "E01HelloWorldDBusStubAdapter.h"
#include <commonapi/examples/E01HelloWorld.h>

namespace commonapi {
namespace examples {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createE01HelloWorldDBusStubAdapter(
                   const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<E01HelloWorldDBusStubAdapter>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

INITIALIZER(registerE01HelloWorldDBusStubAdapter) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(E01HelloWorld::getInterfaceId(),
                                                               &createE01HelloWorldDBusStubAdapter);
}



E01HelloWorldDBusStubAdapterInternal::~E01HelloWorldDBusStubAdapterInternal() {
    deactivateManagedInstances();
    E01HelloWorldDBusStubAdapterHelper::deinit();
}

void E01HelloWorldDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* E01HelloWorldDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"sayHello\">\n"
            "<arg name=\"name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"size\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"message\" type=\"s\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        E01HelloWorldStub,
        CommonAPI::Version
        > E01HelloWorldDBusStubAdapterInternal::getE01HelloWorldInterfaceVersionStubDispatcher(&E01HelloWorldStub::getInterfaceVersion, "uu");



CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    E01HelloWorldStub,
    std::tuple<std::string, int32_t>,
    std::tuple<std::string>
    > E01HelloWorldDBusStubAdapterInternal::sayHelloStubDispatcher(&E01HelloWorldStub::sayHello, "s");





const E01HelloWorldDBusStubAdapterHelper::StubDispatcherTable& E01HelloWorldDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& E01HelloWorldDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

E01HelloWorldDBusStubAdapterInternal::E01HelloWorldDBusStubAdapterInternal(
        const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        CommonAPI::DBus::DBusStubAdapter(
                factory,
                commonApiAddress,
                dbusInterfaceName,
                dbusBusName,
                dbusObjectPath,
                dbusConnection,
                false),
        E01HelloWorldDBusStubAdapterHelper(
            factory,
            commonApiAddress,
            dbusInterfaceName,
            dbusBusName,
            dbusObjectPath,
            dbusConnection,
            std::dynamic_pointer_cast<E01HelloWorldStub>(stub),
            false),
        stubDispatcherTable_({
            { { "sayHello", "si" }, &commonapi::examples::E01HelloWorldDBusStubAdapterInternal::sayHelloStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &commonapi::examples::E01HelloWorldDBusStubAdapterInternal::getE01HelloWorldInterfaceVersionStubDispatcher });
}

const bool E01HelloWorldDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace examples
} // namespace commonapi
