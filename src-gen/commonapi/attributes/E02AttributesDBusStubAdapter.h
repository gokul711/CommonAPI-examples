/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef COMMONAPI_ATTRIBUTES_E02_Attributes_DBUS_STUB_ADAPTER_H_
#define COMMONAPI_ATTRIBUTES_E02_Attributes_DBUS_STUB_ADAPTER_H_

#include <commonapi/attributes/E02AttributesStub.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusStubAdapterHelper.h>
#include <CommonAPI/DBus/DBusStubAdapter.h>
#include <CommonAPI/DBus/DBusFactory.h>
#include <CommonAPI/DBus/DBusServicePublisher.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace commonapi {
namespace attributes {

typedef CommonAPI::DBus::DBusStubAdapterHelper<E02AttributesStub> E02AttributesDBusStubAdapterHelper;

class E02AttributesDBusStubAdapterInternal: public virtual E02AttributesStubAdapter, public E02AttributesDBusStubAdapterHelper {
 public:
    E02AttributesDBusStubAdapterInternal(
            const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
            const std::string& commonApiAddress,
            const std::string& dbusInterfaceName,
            const std::string& dbusBusName,
            const std::string& dbusObjectPath,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
            const std::shared_ptr<CommonAPI::StubBase>& stub);

    ~E02AttributesDBusStubAdapterInternal();

    virtual const bool hasFreedesktopProperties();

    void fireXAttributeChanged(const int32_t& value);
    void fireA1AttributeChanged(const CommonTypes::a1Struct& value);
    void fireFAttributeChanged(const float& value);



    const E02AttributesDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();


static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        E02AttributesStub,
        CommonAPI::Version
        > getE02AttributesInterfaceVersionStubDispatcher;

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        E02AttributesStub,
        int32_t
        > getXAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        E02AttributesStub,
        int32_t
        > setXAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        E02AttributesStub,
        CommonTypes::a1Struct
        > getA1AttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        E02AttributesStub,
        CommonTypes::a1Struct
        > setA1AttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        E02AttributesStub,
        float
        > getFAttributeStubDispatcher;






 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    E02AttributesDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class E02AttributesDBusStubAdapter: public E02AttributesDBusStubAdapterInternal, public std::enable_shared_from_this<E02AttributesDBusStubAdapter> {
public:
    E02AttributesDBusStubAdapter(
                         const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                         const std::string& commonApiAddress,
                         const std::string& dbusInterfaceName,
                         const std::string& dbusBusName,
                         const std::string& dbusObjectPath,
                         const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
                         const std::shared_ptr<CommonAPI::StubBase>& stub) :
            CommonAPI::DBus::DBusStubAdapter(
                            factory,
                            commonApiAddress,
                            dbusInterfaceName,
                            dbusBusName,
                            dbusObjectPath,
                            dbusConnection,
                            false),
            E02AttributesDBusStubAdapterInternal(
                            factory,
                            commonApiAddress,
                            dbusInterfaceName,
                            dbusBusName,
                            dbusObjectPath,
                            dbusConnection,
                            stub) { }
};

} // namespace attributes
} // namespace commonapi

#endif // COMMONAPI_ATTRIBUTES_E02_Attributes_DBUS_STUB_ADAPTER_H_
