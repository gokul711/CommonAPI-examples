/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef COMMONAPI_ATTRIBUTES_E02_Attributes_STUB_H_
#define COMMONAPI_ATTRIBUTES_E02_Attributes_STUB_H_



#include <commonapi/attributes/CommonTypes.h>

#include "E02Attributes.h"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <CommonAPI/SerializableStruct.h>
#include <cstdint>
#include <string>

#include <CommonAPI/Stub.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace commonapi {
namespace attributes {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service E02Attributes. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class E02AttributesStubAdapter: virtual public CommonAPI::StubAdapter, public E02Attributes {
 public:
    ///Notifies all remote listeners about a change of value of the attribute x.
    virtual void fireXAttributeChanged(const int32_t& x) = 0;
    ///Notifies all remote listeners about a change of value of the attribute a1.
    virtual void fireA1AttributeChanged(const CommonTypes::a1Struct& a1) = 0;
    ///Notifies all remote listeners about a change of value of the attribute f.
    virtual void fireFAttributeChanged(const float& f) = 0;



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};


/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for E02Attributes.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class E02AttributesStubRemoteEvent {
 public:
    virtual ~E02AttributesStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute x
    virtual bool onRemoteSetXAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId, int32_t x) = 0;
    /// Action callback for remote set requests on the attribute x
    virtual void onRemoteXAttributeChanged() = 0;

    /// Verification callback for remote set requests on the attribute a1
    virtual bool onRemoteSetA1Attribute(const std::shared_ptr<CommonAPI::ClientId> clientId, CommonTypes::a1Struct a1) = 0;
    /// Action callback for remote set requests on the attribute a1
    virtual void onRemoteA1AttributeChanged() = 0;


};


/**
 * Defines the interface that must be implemented by any class that should provide
 * the service E02Attributes to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class E02AttributesStub: public virtual CommonAPI::Stub<E02AttributesStubAdapter, E02AttributesStubRemoteEvent> {
public:
    virtual ~E02AttributesStub() { }
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /// Provides getter access to the attribute x
    virtual const int32_t& getXAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    /// Provides getter access to the attribute a1
    virtual const CommonTypes::a1Struct& getA1Attribute(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    /// Provides getter access to the attribute f
    virtual const float& getFAttribute(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    using CommonAPI::Stub<E02AttributesStubAdapter, E02AttributesStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<E02AttributesStubAdapter, E02AttributesStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<E02AttributesStubAdapter, E02AttributesStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef E02AttributesStubRemoteEvent RemoteEventType;
    typedef E02Attributes StubInterface;
};

} // namespace attributes
} // namespace commonapi

#endif // COMMONAPI_ATTRIBUTES_E02_Attributes_STUB_H_
