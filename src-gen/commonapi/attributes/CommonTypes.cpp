/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "CommonTypes.h"


namespace commonapi {
namespace attributes {
namespace CommonTypes {


a1Struct::a1Struct(const std::string& sValue, const a2Struct& a2Value):
        s(sValue),
        a2(a2Value)
{
}


bool operator==(const a1Struct& lhs, const a1Struct& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.s == rhs.s &&
        lhs.a2 == rhs.a2
    ;
}

void a1Struct::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> s;
    inputStream >> a2;
}

void a1Struct::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << s;
    outputStream << a2;
}

a2Struct::a2Struct(const bool& bValue, const double& dValue):
        b(bValue),
        d(dValue)
{
}


bool operator==(const a2Struct& lhs, const a2Struct& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.b == rhs.b &&
        lhs.d == rhs.d
    ;
}

void a2Struct::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> b;
    inputStream >> d;
}

void a2Struct::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << b;
    outputStream << d;
}

} // namespace CommonTypes
} // namespace attributes
} // namespace commonapi
