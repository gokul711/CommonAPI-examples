/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "E02AttributesDBusProxy.h"

namespace commonapi {
namespace attributes {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createE02AttributesDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection) {
    return std::make_shared<E02AttributesDBusProxy>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection);
}

INITIALIZER(registerE02AttributesDBusProxy) {
    CommonAPI::DBus::DBusFactory::registerProxyFactoryMethod(E02Attributes::getInterfaceId(),
       &createE02AttributesDBusProxy);
}

E02AttributesDBusProxy::E02AttributesDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection):
        CommonAPI::DBus::DBusProxy(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyconnection)
,x_(*this, "onXAttributeChanged", "setXAttribute", "i", "getXAttribute"),
a1_(*this, "onA1AttributeChanged", "setA1Attribute", "(s(bd))", "getA1Attribute"),
f_(*this, "onFAttributeChanged", "d", "getFAttribute")
    {
    }

E02AttributesDBusProxy::XAttribute& E02AttributesDBusProxy::getXAttribute() {
    return x_;
}
E02AttributesDBusProxy::A1Attribute& E02AttributesDBusProxy::getA1Attribute() {
    return a1_;
}
E02AttributesDBusProxy::FAttribute& E02AttributesDBusProxy::getFAttribute() {
    return f_;
}





void E02AttributesDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

} // namespace attributes
} // namespace commonapi
